{
  "kind": "package",
  "summary": [],
  "remarks": [],
  "exports": {
    "assertNever": {
      "kind": "function",
      "returnValue": {
        "type": "never",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "AssertNever is a utility function that can be used for exhaustiveness checks in switch statements."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "assign": {
      "kind": "function",
      "returnValue": {
        "type": "any",
        "description": [
          {
            "kind": "textDocElement",
            "value": "Resulting merged target."
          }
        ]
      },
      "parameters": {
        "target": {
          "name": "target",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Target object to merge following object arguments into."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "args": {
          "name": "args",
          "description": [
            {
              "kind": "textDocElement",
              "value": "One or more objects that will be mixed into the target in the order they are provided."
            }
          ],
          "isOptional": false,
          "isSpread": true,
          "type": "any[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more objects as arguments and they will be merged sequentially into the target. Note that this will shallow merge; it will not create new cloned values for target members."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Async": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled. This Async helper class solves these issues by tying async code to the lifetime of a disposable object. Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a new instance of the class and remember to call dispose() during your code's dispose handler."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(parent?: any, onError?: (e: any) => void);",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Constructs a new instance of the "
            },
            {
              "kind": "linkDocElement",
              "referenceType": "code",
              "scopeName": "@uifabric",
              "packageName": "utilities",
              "exportName": "Async",
              "value": "Async"
            },
            {
              "kind": "textDocElement",
              "value": " class"
            }
          ],
          "remarks": []
        },
        "clearTimeout": {
          "kind": "method",
          "signature": "public clearTimeout(id: number): void;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "Id to cancel."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Clears the timeout."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "debounce": {
          "kind": "method",
          "signature": "public debounce < T extends Function >(func: T, wait?: number, options?: {\r\n    leading?: boolean;\r\n    maxWait?: number;\r\n    trailing?: boolean;\r\n  }): T;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "T",
            "description": [
              {
                "kind": "textDocElement",
                "value": "The new debounced function."
              }
            ]
          },
          "parameters": {
            "func": {
              "name": "func",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "The function to debounce."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            },
            "wait": {
              "name": "wait",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "The number of milliseconds to delay."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "options": {
              "name": "options",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "The options object."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "{\r\n    leading?: boolean;\r\n    maxWait?: number;\r\n    trailing?: boolean;\r\n  }"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Creates a function that will delay the execution of func until after wait milliseconds have elapsed since the last time it was invoked. Provide an options object to indicate that func should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls to the debounced function will return the result of the last func call. Note: If leading and trailing options are true func will be called on the trailing edge of the timeout only if the the debounced function is invoked more than once during the wait timeout."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "requestAnimationFrame": {
          "kind": "method",
          "signature": "public requestAnimationFrame(callback: () => void): number;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "setImmediate": {
          "kind": "method",
          "signature": "public setImmediate(callback: () => void): number;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "textDocElement",
                "value": "The setTimeout id."
              }
            ]
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "Callback to execute."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "SetImmediate override, which will auto cancel the immediate during dispose."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "setInterval": {
          "kind": "method",
          "signature": "public setInterval(callback: () => void, duration: number): number;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "textDocElement",
                "value": "The setTimeout id."
              }
            ]
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "Callback to execute."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            },
            "duration": {
              "name": "duration",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "Duration in milliseconds."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "SetInterval override, which will auto cancel the timeout during dispose."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "setTimeout": {
          "kind": "method",
          "signature": "public setTimeout(callback: () => void, duration: number): number;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "textDocElement",
                "value": "The setTimeout id."
              }
            ]
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "Callback to execute."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            },
            "duration": {
              "name": "duration",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "Duration in milliseconds."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "SetTimeout override, which will auto cancel the timeout during dispose."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "throttle": {
          "kind": "method",
          "signature": "public throttle < T extends Function >(func: T, wait?: number, options?: {\r\n    leading?: boolean;\r\n    trailing?: boolean;\r\n  }): T;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "T",
            "description": [
              {
                "kind": "textDocElement",
                "value": "The new throttled function."
              }
            ]
          },
          "parameters": {
            "func": {
              "name": "func",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "The function to throttle."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            },
            "wait": {
              "name": "wait",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "The number of milliseconds to throttle executions to. Defaults to 0."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "options": {
              "name": "options",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "The options object."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "{\r\n    leading?: boolean;\r\n    trailing?: boolean;\r\n  }"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Creates a function that, when executed, will only call the func function at most once per every wait milliseconds. Provide an options object to indicate that func should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled function will return the result of the last func call. Note: If leading and trailing options are true func will be called on the trailing edge of the timeout only if the the throttled function is invoked more than once during the wait timeout."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "AutoScroll": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "AutoScroll simply hooks up mouse events given a parent element, and scrolls the container up/down depending on how close the mouse is to the top/bottom of the container. Once you don't want autoscroll any more, just dispose the helper and it will unhook events."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(element: HTMLElement);",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Constructs a new instance of the "
            },
            {
              "kind": "linkDocElement",
              "referenceType": "code",
              "scopeName": "@uifabric",
              "packageName": "utilities",
              "exportName": "AutoScroll",
              "value": "AutoScroll"
            },
            {
              "kind": "textDocElement",
              "value": " class"
            }
          ],
          "remarks": []
        }
      }
    },
    "BaseComponent": {
      "kind": "class",
      "extends": "React.Component",
      "implements": "",
      "typeParameters": [
        "P extends IBaseProps",
        "S"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "BaseComponent class, which provides basic helpers for all components."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props?: P, context?: any);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "The props for the component."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "P"
            },
            "context": {
              "name": "context",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "The context for the component."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "BaseComponent constructor"
            }
          ],
          "remarks": []
        },
        "_async": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Async",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Gets the async instance associated with the component, created on demand. The async instance gives subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks will be cleared/ignored automatically after unmounting. The helpers within the async object also preserve the this pointer so that you don't need to \"bind\" the callbacks."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "_disposables": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "IDisposable[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Allows subclasses to push things to this._disposables to be auto disposed."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "_events": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "EventGroup",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Gets the event group instance assocaited with the component, created on demand. The event instance provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks will be automatically disconnected after unmounting. The helpers within the events object also preserve the this reference so that you don't need to \"bind\" the callbacks."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "_resolveRef": {
          "kind": "method",
          "signature": "protected _resolveRef(refName: string): (ref: any) => any;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "(ref: any) => any",
            "description": [
              {
                "kind": "textDocElement",
                "value": "A function instance keyed from the given refname."
              }
            ]
          },
          "parameters": {
            "refName": {
              "name": "refName",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "Name of the member to assign the ref to."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Helper to return a memoized ref resolver function."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "_shouldUpdateComponentRef": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Controls whether the componentRef prop will be resolved by this component instance. If you are implementing a passthrough (higher-order component), you would set this to false and pass through the props to the inner component, allowing it to resolve the componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "_warnConditionallyRequiredProps": {
          "kind": "method",
          "signature": "protected _warnConditionallyRequiredProps(requiredProps: string[], conditionalPropName: string, condition: boolean): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "requiredProps": {
              "name": "requiredProps",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "The name of the props that are required when the condition is met."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string[]"
            },
            "conditionalPropName": {
              "name": "conditionalPropName",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "The name of the prop that the condition is based on."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "condition": {
              "name": "condition",
              "description": [
                {
                  "kind": "textDocElement",
                  "value": "Whether the condition is met."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Warns when props are required if a condition is met."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "onError": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "((errorMessage?: string, ex?: any) => void)",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "External consumers should override BaseComponent.onError to hook into error messages that occur from exceptions thrown from within components."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "createArray": {
      "kind": "function",
      "returnValue": {
        "type": "any[]",
        "description": []
      },
      "parameters": {
        "size": {
          "name": "size",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Size of array."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "getItem": {
          "name": "getItem",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Callback to populate given cell index."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "(index?: number) => any"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Creates an array of a given size and helper method to populate."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Customizer": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "The Customizer component allows for default props to be mixed into components which are decorated with the customizable() decorator. This enables injection scenarios like: 1. render svg icons instead of the icon font within all buttons 2. inject a custom theme object into a component Props are provided via the settings prop, which should be a json map which contains 1 or more name/value pairs representing injectable props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: any, context: any);",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Constructs a new instance of the "
            },
            {
              "kind": "linkDocElement",
              "referenceType": "code",
              "scopeName": "@uifabric",
              "packageName": "utilities",
              "exportName": "Customizer",
              "value": "Customizer"
            },
            {
              "kind": "textDocElement",
              "value": " class"
            }
          ],
          "remarks": []
        },
        "getChildContext": {
          "kind": "method",
          "signature": "public getChildContext(): any;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "DelayedRender": {
      "kind": "class",
      "extends": "React.Component",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Utility component for delaying the render of a child component after a given delay. This component requires a single child component; don't pass in many components. Wrap multiple components in a DIV if necessary."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDelayedRenderProps);",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Constructs a new instance of the "
            },
            {
              "kind": "linkDocElement",
              "referenceType": "code",
              "scopeName": "@uifabric",
              "packageName": "utilities",
              "exportName": "DelayedRender",
              "value": "DelayedRender"
            },
            {
              "kind": "textDocElement",
              "value": " class"
            }
          ],
          "remarks": []
        }
      }
    },
    "elementContains": {
      "kind": "function",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Determines whether or not a parent element contains a given child element. If `allowVirtualParents` is true, this method may return `true` if the child has the parent in its virtual element hierarchy."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "EventGroup": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "An instance of EventGroup allows anything with a handle to it to trigger events on it. If the target is an HTMLElement, the event will be attached to the element and can be triggered as usual (like clicking for onclick). The event can be triggered by calling EventGroup.raise() here. If the target is an HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets handled here in EventGroup, and the handler is called in the context of the parent (which is passed in in the constructor)."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "public constructor(parent: any);",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "parent: the context in which events attached to non-HTMLElements are called"
            }
          ],
          "remarks": []
        },
        "isDeclared": {
          "kind": "method",
          "signature": "public static isDeclared(target: any, eventName: string): boolean;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Check to see if the target has declared support of the given event."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "isObserved": {
          "kind": "method",
          "signature": "public static isObserved(target: any, eventName: string): boolean;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "FabricPerformance": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Performance helper class for measuring things."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "setPeriodicReset": {
          "kind": "method",
          "signature": "public static setPeriodicReset(): void;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "summary": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IPerfSummary",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "findIndex": {
      "kind": "function",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {
        "array": {
          "name": "array",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Array to search."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any[]"
        },
        "cb": {
          "name": "cb",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Callback which returns true on matches."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "(item: any, index?: number) => boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Helper to find the index of an item within an array, using a callback to determine the match."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "findScrollableParent": {
      "kind": "function",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Traverses up the DOM for the element with the data-is-scrollable=true attribute, or returns document.body."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "focusFirstChild": {
      "kind": "function",
      "returnValue": {
        "type": "boolean",
        "description": [
          {
            "kind": "textDocElement",
            "value": "True if focus was set, false if it was not."
          }
        ]
      },
      "parameters": {
        "rootElement": {
          "name": "rootElement",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Element to start the search for a focusable child."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Attempts to focus the first focusable element that is a child or child's child of the rootElement."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "format": {
      "kind": "function",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "String format method, used for scenarios where at runtime you need to evaluate a formatted string given a tokenized string. This usually only is needed in localization scenarios. Example \"I love {0} every {1}\".format(\"CXP\") will result in a Debug Exception."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getDistanceBetweenPoints": {
      "kind": "function",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Determines the distance between two points."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getFirstFocusable": {
      "kind": "function",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Gets the first focusable element."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getId": {
      "kind": "function",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Generates a unique id in the global scope (this spans across duplicate copies of the same library.)"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getInitials": {
      "kind": "function",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Get (up to 2 characters) initials based on display name of the persona."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getLanguage": {
      "kind": "function",
      "returnValue": {
        "type": "string | null",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Gets the rtl state of the page (returns true if in rtl.)"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getLastFocusable": {
      "kind": "function",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Gets the last focusable element."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getNativeProps": {
      "kind": "function",
      "returnValue": {
        "type": "T",
        "description": [
          {
            "kind": "textDocElement",
            "value": "The filtered props"
          }
        ]
      },
      "parameters": {
        "props": {
          "name": "props",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The unfiltered input props"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "allowedPropsNames": {
          "name": "allowedPropsNames",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The array of allowed propnames."
            }
          ]
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Gets native supported props for an html element provided the allowance set. Use one of the property sets defined (divProperties, buttonPropertes, etc) to filter out supported properties from a given props set. Note that all data- and aria- prefixed attributes will be allowed. NOTE: getNativeProps should always be applied first when adding props to a react component. The non-native props should be applied second. This will prevent getNativeProps from overriding your custom props. For example, if props passed to getNativeProps has an onClick function and getNativeProps is added to the component after an onClick function is added, then the getNativeProps onClick will override it."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getNextElement": {
      "kind": "function",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Traverse to find the next focusable element."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getParent": {
      "kind": "function",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Gets the element which is the parent of a given element. If `allowVirtuaParents` is `true`, this method prefers the virtual parent over real DOM parent when present."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getPreviousElement": {
      "kind": "function",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Traverse to find the previous element."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getRect": {
      "kind": "function",
      "returnValue": {
        "type": "IRectangle | undefined",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Helper to get bounding client rect, works with window."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getRTL": {
      "kind": "function",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Gets the rtl state of the page (returns true if in rtl.)"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getRTLSafeKeyCode": {
      "kind": "function",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Returns the given key, but flips right/left arrows if necessary."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getScrollbarWidth": {
      "kind": "function",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Calculates the width of a scrollbar for the browser/os."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getVirtualParent": {
      "kind": "function",
      "returnValue": {
        "type": "HTMLElement | undefined",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Gets the virtual parent given the child element, if it exists."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "GlobalSettings": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Global settings helper, which stores settings in the global (window) namespace. If window is not provided, it will store settings in module scope. Provides a way to observe changes as well when their values change."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "addChangeListener": {
          "kind": "method",
          "signature": "public static addChangeListener(cb: IChangeEventCallback): void;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "getValue": {
          "kind": "method",
          "signature": "public static getValue < T >(key: string): T;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "T",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "removeChangeListener": {
          "kind": "method",
          "signature": "public static removeChangeListener(cb: IChangeEventCallback): void;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "setValue": {
          "kind": "method",
          "signature": "public static setValue < T >(key: string, value: T): void;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "hasHorizontalOverflow": {
      "kind": "function",
      "returnValue": {
        "type": "boolean",
        "description": [
          {
            "kind": "textDocElement",
            "value": "True if element's content overflows"
          }
        ]
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Element to check for overflow"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Detects whether an element's content has horizontal overflow"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "hasOverflow": {
      "kind": "function",
      "returnValue": {
        "type": "boolean",
        "description": [
          {
            "kind": "textDocElement",
            "value": "True if element's content overflows"
          }
        ]
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Element to check for overflow"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Detects whether an element's content has overflow in any direction"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "hasVerticalOverflow": {
      "kind": "function",
      "returnValue": {
        "type": "boolean",
        "description": [
          {
            "kind": "textDocElement",
            "value": "True if element's content overflows"
          }
        ]
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Element to check for overflow"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Detects whether an element's content has vertical overflow"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "hoistMethods": {
      "kind": "function",
      "returnValue": {
        "type": "string[]",
        "description": [
          {
            "kind": "textDocElement",
            "value": "An array of names of methods that were hoisted."
          }
        ]
      },
      "parameters": {
        "destination": {
          "name": "destination",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The instance of the object to hoist the methods onto."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "source": {
          "name": "source",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The instance of the object where the methods are hoisted from."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "exclusions": {
          "name": "exclusions",
          "description": [
            {
              "kind": "textDocElement",
              "value": "(Optional) What methods to exclude from being hoisted."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "string[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Allows you to hoist methods, except those in an exclusion set from a source object into a destination object."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "IBaseProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "BaseProps interface."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IChangeDescription": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Change description used for change callbacks in GlobalSettings."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "key": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "oldValue": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "value": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IChangeEventCallback": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Change event callback."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "___id__": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "__call": {
          "kind": "method",
          "signature": "(changeDescription?: IChangeDescription): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "ICustomizerProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Customizer component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "settings": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISettings",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IDelayedRenderProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "DelayedRender component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "delay": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Number of milliseconds to delay rendering children."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IDisposable": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Disposable interface."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "dispose": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IPoint": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Point interface."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "x": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "y": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IRectangle": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Rectangle interface."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "bottom": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "height": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "left": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "right": {
          "kind": "property",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "top": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "width": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IRenderFunction": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "P"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Render function interface for providing overrideable render callbacks."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "__call": {
          "kind": "method",
          "signature": "(props?: P, defaultRender?: (props?: P) => JSX.Element | null): JSX.Element | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "isElementFocusSubZone": {
      "kind": "function",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Determines if a given element is a focus sub zone."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "isElementFocusZone": {
      "kind": "function",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Determines if a given element is a focus zone."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "isElementTabbable": {
      "kind": "function",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Determines if an element can receive focus."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "isElementVisible": {
      "kind": "function",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Determines if an element is visible."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "KeyCodes": {
      "kind": "enum",
      "values": {
        "a": {
          "kind": "enum value",
          "value": "65",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "backspace": {
          "kind": "enum value",
          "value": "8",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "comma": {
          "kind": "enum value",
          "value": "188",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "del": {
          "kind": "enum value",
          "value": "46",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "down": {
          "kind": "enum value",
          "value": "40",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "end": {
          "kind": "enum value",
          "value": "35",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "enter": {
          "kind": "enum value",
          "value": "13",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "escape": {
          "kind": "enum value",
          "value": "27",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "home": {
          "kind": "enum value",
          "value": "36",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "left": {
          "kind": "enum value",
          "value": "37",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "pageDown": {
          "kind": "enum value",
          "value": "34",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "pageUp": {
          "kind": "enum value",
          "value": "33",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "right": {
          "kind": "enum value",
          "value": "39",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "semicolon": {
          "kind": "enum value",
          "value": "186",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "space": {
          "kind": "enum value",
          "value": "32",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "tab": {
          "kind": "enum value",
          "value": "9",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "up": {
          "kind": "enum value",
          "value": "38",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Const enum for keycodes."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "memoizeFunction": {
      "kind": "function",
      "returnValue": {
        "type": "T",
        "description": [
          {
            "kind": "textDocElement",
            "value": "A memoized version of the function."
          }
        ]
      },
      "parameters": {
        "cb": {
          "name": "cb",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The function to memoize."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T"
        },
        "maxCacheSize": {
          "name": "maxCacheSize",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Max results to cache. If the cache exceeds this value, it will reset on the next call."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result. Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in undefined for a value and relying on a default function will execute it the first time, but will not re-evaluate subsequent times which may have been unexpected. By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "nullRender": {
      "kind": "function",
      "returnValue": {
        "type": "JSX.Element | null",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Simple constant function for returning null, used to render empty templates in JSX."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Rectangle": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Rectangle helper class."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(left: number = 0, right: number = 0, top: number = 0, bottom: number = 0);",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Constructs a new instance of the "
            },
            {
              "kind": "linkDocElement",
              "referenceType": "code",
              "scopeName": "@uifabric",
              "packageName": "utilities",
              "exportName": "Rectangle",
              "value": "Rectangle"
            },
            {
              "kind": "textDocElement",
              "value": " class"
            }
          ],
          "remarks": []
        },
        "bottom": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "equals": {
          "kind": "method",
          "signature": "public equals(rect: Rectangle): boolean;",
          "accessModifier": "public",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Tests if another rect is approximately equal to this rect (within 4 decimal places.)"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "height": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Calculated automatically by subtracting the bottom from top."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "left": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "right": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "top": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "width": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Calculated automatically by subtracting the right from left"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "setWarningCallback": {
      "kind": "function",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "warningCallback": {
          "name": "warningCallback",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Callback to override the generated warnings."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "(message: string) => void"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Configures the warning callback. Passing in undefined will reset it to use the default console.warn function."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "toMatrix": {
      "kind": "function",
      "returnValue": {
        "type": "T[][]",
        "description": [
          {
            "kind": "textDocElement",
            "value": "{any[][]} - A matrix of items"
          }
        ]
      },
      "parameters": {
        "items": {
          "name": "items",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The array to convert"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T[]"
        },
        "columnCount": {
          "name": "columnCount",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The number of columns for the resulting matrix"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Convert the given array to a matrix with columnCount number of columns."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "unhoistMethods": {
      "kind": "function",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "source": {
          "name": "source",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The source object upon which methods were hoisted."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "methodNames": {
          "name": "methodNames",
          "description": [
            {
              "kind": "textDocElement",
              "value": "An array of method names to unhoist."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Provides a method for convenience to unhoist hoisted methods."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "warn": {
      "kind": "function",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "message": {
          "name": "message",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Warning message."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Sends a warning to console, if the api is present."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "warnConditionallyRequiredProps": {
      "kind": "function",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "componentName": {
          "name": "componentName",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The name of the component being used."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "props": {
          "name": "props",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The props passed into the component."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "P"
        },
        "requiredProps": {
          "name": "requiredProps",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The name of the props that are required when the condition is met."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string[]"
        },
        "conditionalPropName": {
          "name": "conditionalPropName",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The name of the prop that the condition is based on."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "condition": {
          "name": "condition",
          "description": [
            {
              "kind": "textDocElement",
              "value": "Whether the condition is met."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Warns when props are required if a condition is met."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "warnDeprecations": {
      "kind": "function",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "componentName": {
          "name": "componentName",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The name of the component being used."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "props": {
          "name": "props",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The props passed into the component."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "P"
        },
        "deprecationMap": {
          "name": "deprecationMap",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The map of deprecations, where key is the prop name and the value is either null or a replacement prop name."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "ISettingsMap<P>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Warns when a deprecated props are being used."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "warnMutuallyExclusive": {
      "kind": "function",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "componentName": {
          "name": "componentName",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The name of the component being used."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "props": {
          "name": "props",
          "description": [
            {
              "kind": "textDocElement",
              "value": "The props passed into the component."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "P"
        },
        "exclusiveMap": {
          "name": "exclusiveMap",
          "description": [
            {
              "kind": "textDocElement",
              "value": "A map where the key is a parameter, and the value is the other parameter."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "ISettingsMap<P>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Warns when two props which are mutually exclusive are both being used."
        }
      ],
      "remarks": [],
      "isBeta": false
    }
  }
}
