{"version":3,"sources":["array.ts"],"names":[],"mappings":";;;IAAA;;;;;;;OAOG;IACH,mBAA0B,KAAY,EAAE,EAA0C;QAChF,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QAEf,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC/C,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpB,KAAK,GAAG,CAAC,CAAC;gBACV,KAAK,CAAC;YACR,CAAC;QACH,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAXD,8BAWC;IAED;;;;;;OAMG;IACH,qBAA4B,IAAY,EAAE,OAAiC;QACzE,IAAI,KAAK,GAAG,EAAE,CAAC;QAEf,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9B,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IARD,kCAQC;IAED;;;;;;;;OAQG;IACH,kBAA4B,KAAU,EAAE,WAAmB;QACzD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,YAAY,EAAE,KAAK;YAC5C,EAAE,CAAC,CAAC,KAAK,GAAG,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YAC5B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC3C,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,EAAE,EAAW,CAAC,CAAC;IAClB,CAAC;IATD,4BASC","file":"array.js","sourcesContent":["/**\r\n * Helper to find the index of an item within an array, using a callback to\r\n * determine the match.\r\n *\r\n * @public\r\n * @param array - Array to search.\r\n * @param cb - Callback which returns true on matches.\r\n */\r\nexport function findIndex(array: any[], cb: (item: any, index?: number) => boolean): number {\r\n  let index = -1;\r\n\r\n  for (let i = 0; array && i < array.length; i++) {\r\n    if (cb(array[i], i)) {\r\n      index = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return index;\r\n}\r\n\r\n/**\r\n * Creates an array of a given size and helper method to populate.\r\n *\r\n * @public\r\n * @param size - Size of array.\r\n * @param getItem - Callback to populate given cell index.\r\n */\r\nexport function createArray(size: number, getItem?: (index?: number) => any): any[] {\r\n  let array = [];\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    array.push(getItem ? getItem(i) : null);\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n/**\r\n * Convert the given array to a matrix with columnCount number\r\n * of columns.\r\n *\r\n * @public\r\n * @param items - The array to convert\r\n * @param columnCount - The number of columns for the resulting matrix\r\n * @returns {any[][]} - A matrix of items\r\n */\r\nexport function toMatrix<T>(items: T[], columnCount: number): T[][] {\r\n  return items.reduce((rows, currentValue, index) => {\r\n    if (index % columnCount === 0) {\r\n      rows.push([currentValue]);\r\n    } else {\r\n      rows[rows.length - 1].push(currentValue);\r\n    }\r\n    return rows;\r\n  }, [] as T[][]);\r\n}\r\n"],"sourceRoot":"..\\src"}