{"version":3,"sources":["components/SpinButton/SpinButton.tsx"],"names":[],"mappings":"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","file":"components/SpinButton/SpinButton.js","sourcesContent":["import * as React from 'react';\r\nimport { IconButton } from '../../Button';\r\nimport { Label } from '../../Label';\r\nimport { Icon } from '../../Icon';\r\nimport {\r\n  BaseComponent,\r\n  css,\r\n  getId,\r\n  KeyCodes,\r\n  autobind\r\n} from '../../Utilities';\r\nimport {\r\n  ISpinButton,\r\n  ISpinButtonProps\r\n} from './SpinButton.Props';\r\nimport { Position } from '../../utilities/positioning';\r\nimport * as stylesImport from './SpinButton.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport enum KeyboardSpinDirection {\r\n  down = -1,\r\n  notSpinning = 0,\r\n  up = 1\r\n}\r\n\r\nexport interface ISpinButtonState {\r\n  /**\r\n   * the value of the spin button\r\n   */\r\n  value?: string;\r\n\r\n  /**\r\n   * keyboard spin direction, used to style the up or down button\r\n   * as active when up/down arrow is pressed\r\n   */\r\n  keyboardSpinDirection?: KeyboardSpinDirection;\r\n}\r\n\r\nexport class SpinButton extends BaseComponent<ISpinButtonProps, ISpinButtonState> implements ISpinButton {\r\n\r\n  public static defaultProps: ISpinButtonProps = {\r\n    step: 1,\r\n    min: 0,\r\n    max: 100,\r\n    disabled: false,\r\n    labelPosition: Position.start,\r\n    label: '',\r\n    incrementButtonIcon: { iconName: 'ChevronUpSmall' },\r\n    decrementButtonIcon: { iconName: 'ChevronDownSmall' }\r\n  };\r\n\r\n  private _input: HTMLInputElement;\r\n  private _inputId: string;\r\n  private _labelId: string;\r\n  private _lastValidValue: string | undefined;\r\n  private _spinningByMouse: boolean;\r\n\r\n  private _onValidate?: (value: string) => string | void;\r\n  private _onIncrement?: (value: string) => string | void;\r\n  private _onDecrement?: (value: string) => string | void;\r\n\r\n  private _currentStepFunctionHandle: number;\r\n  private _initialStepDelay = 400;\r\n  private _stepDelay = 75;\r\n  private _formattedValidUnitOptions: string[] = [];\r\n  private _arrowButtonStyle = {\r\n    icon: {\r\n      fontSize: '6px',\r\n    }\r\n  };\r\n\r\n  constructor(props: ISpinButtonProps) {\r\n    super(props);\r\n\r\n    this._warnMutuallyExclusive({\r\n      'value': 'defaultValue'\r\n    });\r\n\r\n    let value = props.value || props.defaultValue || String(props.min) || '0';\r\n    this._lastValidValue = value;\r\n\r\n    this.state = {\r\n      value: value,\r\n      keyboardSpinDirection: KeyboardSpinDirection.notSpinning\r\n    };\r\n\r\n    this._currentStepFunctionHandle = -1;\r\n    this._labelId = getId('Label');\r\n    this._inputId = getId('input');\r\n    this._spinningByMouse = false;\r\n\r\n    if (!props.defaultValue && props.value) {\r\n      this._onValidate = props.onValidate;\r\n      this._onIncrement = props.onIncrement;\r\n      this._onDecrement = props.onDecrement;\r\n    } else {\r\n      this._onValidate = this._defaultOnValidate;\r\n      this._onIncrement = this._defaultOnIncrement;\r\n      this._onDecrement = this._defaultOnDecrement;\r\n    }\r\n\r\n    this.focus = this.focus.bind(this);\r\n  }\r\n\r\n  /**\r\n  * Invoked when a component is receiving new props. This method is not called for the initial render.\r\n  */\r\n  public componentWillReceiveProps(newProps: ISpinButtonProps): void {\r\n    this._lastValidValue = this.state.value;\r\n    let value: string = newProps.value ? newProps.value : String(newProps.min);\r\n    if (newProps.defaultValue) {\r\n      value = String(Math.max(newProps.min as number, Math.min(newProps.max as number, Number(newProps.defaultValue))));\r\n    }\r\n\r\n    this.setState({\r\n      value: value\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      disabled,\r\n      label,\r\n      min,\r\n      max,\r\n      labelPosition,\r\n      iconProps,\r\n      incrementButtonIcon,\r\n      decrementButtonIcon,\r\n      title,\r\n      ariaLabel\r\n    } = this.props;\r\n\r\n    const {\r\n      value,\r\n      keyboardSpinDirection\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className={ styles.SpinButtonContainer }>\r\n        { labelPosition !== Position.bottom && <div className={ css(styles.labelWrapper, this._getClassNameForLabelPosition(labelPosition as Position)) }>\r\n          { iconProps && <Icon iconName={ iconProps.iconName } className={ css(styles.SpinButtonIcon) } aria-hidden='true'></Icon> }\r\n          { label &&\r\n            <Label\r\n              id={ this._labelId }\r\n              htmlFor={ this._inputId }\r\n              className={ styles.SpinButtonLabel }>{ label }\r\n            </Label>\r\n          }\r\n        </div> }\r\n        <div\r\n          className={ css(styles.SpinButtonWrapper, ((labelPosition === Position.top || labelPosition === Position.bottom) ? styles.topBottom : '')) }\r\n          title={ title && title }\r\n          aria-label={ ariaLabel && ariaLabel }\r\n        >\r\n          <input\r\n            value={ value }\r\n            id={ this._inputId }\r\n            onChange={ this._onChange }\r\n            onInput={ this._onInputChange }\r\n            className={ css(styles.Input, (disabled ? styles.disabled : '')) }\r\n            type='text'\r\n            role='spinbutton'\r\n            aria-labelledby={ label && this._labelId }\r\n            aria-valuenow={ value }\r\n            aria-valuemin={ min && String(min) }\r\n            aria-valuemax={ max && String(max) }\r\n            onBlur={ this._validate }\r\n            ref={ this._resolveRef('_input') }\r\n            onFocus={ this.focus }\r\n            onKeyDown={ this._handleKeyDown }\r\n            onKeyUp={ this._handleKeyUp }\r\n            readOnly={ disabled }\r\n            aria-disabled={ disabled }\r\n          />\r\n          <span className={ styles.ArrowBox }>\r\n            <IconButton\r\n              className={ css('ms-UpButton', styles.UpButton, (keyboardSpinDirection === KeyboardSpinDirection.up ? styles.active : '')) }\r\n              styles={ this._arrowButtonStyle }\r\n              disabled={ disabled }\r\n              iconProps={ incrementButtonIcon }\r\n              aria-hidden='true'\r\n              onMouseDown={ () => this._onIncrementMouseDown() }\r\n              onMouseLeave={ this._stop }\r\n              onMouseUp={ this._stop }\r\n              tabIndex={ -1 }\r\n            />\r\n            <IconButton\r\n              className={ css('ms-DownButton', styles.DownButton, (keyboardSpinDirection === KeyboardSpinDirection.down ? styles.active : '')) }\r\n              styles={ this._arrowButtonStyle }\r\n              disabled={ disabled }\r\n              iconProps={ decrementButtonIcon }\r\n              aria-hidden='true'\r\n              onMouseDown={ () => this._onDecrementMouseDown() }\r\n              onMouseLeave={ this._stop }\r\n              onMouseUp={ this._stop }\r\n              tabIndex={ -1 }\r\n            />\r\n          </span>\r\n        </div>\r\n        { labelPosition === Position.bottom && <div className={ css(styles.labelWrapper, this._getClassNameForLabelPosition(labelPosition)) }>\r\n          { iconProps && <Icon iconName={ iconProps.iconName } className={ css(styles.SpinButtonIcon) } aria-hidden='true'></Icon> }\r\n          { label &&\r\n            <Label\r\n              id={ this._labelId }\r\n              htmlFor={ this._inputId }\r\n              className={ styles.SpinButtonLabel }>{ label }\r\n            </Label>\r\n          }\r\n        </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * OnFocus select the contents of the input\r\n   */\r\n  public focus() {\r\n    if (this._spinningByMouse || this.state.keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\r\n      this._stop();\r\n    }\r\n\r\n    this._input.focus();\r\n    this._input.select();\r\n  }\r\n\r\n  /**\r\n   * Gets the value of the spin button.\r\n   */\r\n  public get value(): string | undefined {\r\n    return this.props.value === undefined ? this.state.value : this.props.value;\r\n  }\r\n\r\n  /**\r\n   * Validate function to use if one is not passed in\r\n   */\r\n  private _defaultOnValidate = (value: string) => {\r\n    if (isNaN(Number(value))) {\r\n      return this._lastValidValue;\r\n    }\r\n    const newValue = Math.min(this.props.max as number, Math.max(this.props.min as number, Number(value)));\r\n    return String(newValue);\r\n  }\r\n\r\n  /**\r\n   * Increment function to use if one is not passed in\r\n   */\r\n  private _defaultOnIncrement = (value: string) => {\r\n    let newValue = Math.min(Number(value) + (this.props.step as number), this.props.max as number);\r\n    return String(newValue);\r\n  }\r\n\r\n  /**\r\n   * Increment function to use if one is not passed in\r\n   */\r\n  private _defaultOnDecrement = (value: string) => {\r\n    let newValue = Math.max(Number(value) - (this.props.step as number), this.props.min as number);\r\n    return String(newValue);\r\n  }\r\n\r\n  /**\r\n   * Returns the class name corresponding to the label position\r\n   */\r\n  private _getClassNameForLabelPosition(labelPosition: Position): string {\r\n    let className: string = '';\r\n\r\n    switch (labelPosition) {\r\n      case Position.start:\r\n        className = styles.start;\r\n        break;\r\n      case Position.end:\r\n        className = styles.end;\r\n        break;\r\n      case Position.top:\r\n        className = styles.top;\r\n        break;\r\n      case Position.bottom:\r\n        className = styles.bottom;\r\n    }\r\n\r\n    return className;\r\n  }\r\n\r\n  private _onChange() {\r\n    /**\r\n     * A noop input change handler.\r\n     * https://github.com/facebook/react/issues/7027.\r\n     * Using the native onInput handler fixes the issue but onChange\r\n     * still need to be wired to avoid React console errors\r\n     * TODO: Check if issue is resolved when React 16 is available.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * This is used when validating text entry\r\n   * in the input (not when changed via the buttons)\r\n   * @param event - the event that fired\r\n   */\r\n  @autobind\r\n  private _validate(event: React.FocusEvent<HTMLInputElement>) {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    const value: string = element.value;\r\n    if (this.state.value) {\r\n      const newValue = this._onValidate!(value);\r\n      if (newValue) {\r\n        this._lastValidValue = newValue;\r\n        this.setState({ value: newValue });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The method is needed to ensure we are updating the actual input value.\r\n   * without this our value will never change (and validation will not have the correct number)\r\n   * @param event - the event that was fired\r\n   */\r\n  @autobind\r\n  private _onInputChange(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    const value: string = element.value;\r\n\r\n    this.setState({\r\n      value: value,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the value with the given stepFunction\r\n   * @param shouldSpin - should we fire off another updateValue when we are done here? This should be true\r\n   * when spinning in response to a mouseDown\r\n   * @param stepFunction - function to use to step by\r\n   */\r\n  @autobind\r\n  private _updateValue(shouldSpin: boolean, stepDelay: number, stepFunction: (string: string) => string | void) {\r\n    const newValue = stepFunction(this.state.value as string);\r\n    if (newValue) {\r\n      this._lastValidValue = newValue;\r\n      this.setState({ value: newValue });\r\n    }\r\n\r\n    if (this._spinningByMouse !== shouldSpin) {\r\n      this._spinningByMouse = shouldSpin;\r\n    }\r\n\r\n    if (shouldSpin) {\r\n      this._currentStepFunctionHandle = this._async.setTimeout(() => { this._updateValue(shouldSpin, this._stepDelay, stepFunction); }, stepDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop spinning (clear any currently pending update and set spinning to false)\r\n   */\r\n  @autobind\r\n  private _stop() {\r\n    if (this._currentStepFunctionHandle >= 0) {\r\n      this._async.clearTimeout(this._currentStepFunctionHandle);\r\n      this._currentStepFunctionHandle = -1;\r\n    }\r\n\r\n    if (this._spinningByMouse || this.state.keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\r\n      this._spinningByMouse = false;\r\n      this.setState({ keyboardSpinDirection: KeyboardSpinDirection.notSpinning });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle keydown on the text field. We need to update\r\n   * the value when up or down arrow are depressed\r\n   * @param event - the keyboardEvent that was fired\r\n   */\r\n  @autobind\r\n  private _handleKeyDown(event: React.KeyboardEvent<HTMLElement>) {\r\n    if (this.props.disabled) {\r\n      this._stop();\r\n\r\n      // eat the up and down arrow keys to keep the page from scrolling\r\n      if (event.which === KeyCodes.up || event.which === KeyCodes.down) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    let spinDirection = KeyboardSpinDirection.notSpinning;\r\n\r\n    if (event.which === KeyCodes.up) {\r\n\r\n      spinDirection = KeyboardSpinDirection.up;\r\n      this._updateValue(false /* shouldSpin */, this._initialStepDelay, this._onIncrement!);\r\n    } else if (event.which === KeyCodes.down) {\r\n\r\n      spinDirection = KeyboardSpinDirection.down;\r\n      this._updateValue(false /* shouldSpin */, this._initialStepDelay, this._onDecrement!);\r\n    } else if (event.which === KeyCodes.enter) {\r\n      event.currentTarget.blur();\r\n      this.focus();\r\n    } else if (event.which === KeyCodes.escape) {\r\n      if (this.state.value !== this._lastValidValue) {\r\n        this.setState({ value: this._lastValidValue });\r\n      }\r\n    }\r\n\r\n    // style the increment/decrement button to look active\r\n    // when the corresponding up/down arrow keys trigger a step\r\n    if (this.state.keyboardSpinDirection !== spinDirection) {\r\n      this.setState({ keyboardSpinDirection: spinDirection });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make sure that we have stopped spinning on keyUp\r\n   * if the up or down arrow fired this event\r\n   * @param event stop spinning if we\r\n   */\r\n  @autobind\r\n  private _handleKeyUp(event: React.KeyboardEvent<HTMLElement>) {\r\n\r\n    if (this.props.disabled || event.which === KeyCodes.up || event.which === KeyCodes.down) {\r\n      this._stop();\r\n      return;\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onIncrementMouseDown() {\r\n    this._updateValue(true /* shouldSpin */, this._initialStepDelay, this._onIncrement!);\r\n  }\r\n\r\n  @autobind\r\n  private _onDecrementMouseDown() {\r\n    this._updateValue(true /* shouldSpin */, this._initialStepDelay, this._onDecrement!);\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}